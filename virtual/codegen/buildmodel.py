#! /usr/bin/env python
# vim: ts=3:sw=3:expandtab

import sys
import os
from optparse import OptionParser
from t2f import translatefile, postformat, getdata
from pythonin import parameters, kinematics, symbols, lambdafunc, dotproducts
config={'parameters' : parameters,
        'kinematics' : kinematics,
        'symbols' : symbols,
        'lambdafunc' : lambdafunc,
        'dotproducts' : dotproducts}


parser = OptionParser()

parser.add_option("-i", "--input", dest="input",
                  action="store", type="string",
                  help="input file", metavar="INPUT")


(options, args) = parser.parse_args()

if not options.input:
    sys.exit("Error: no input file was found! Please specify one with the -i options.")

# print '----------------------------------'

modelfile = open('model.f90', 'w')

#print "--------------------"

outdict=translatefile(options.input,config)
# Write model.f90 file
modelfile.write('module     gghh_smehc_model\n')
modelfile.write('   ! Model parameters for the model: smdiagehc\n')
modelfile.write('   use gghh_smehc_config, only: ki')
modelfile.write(', &\n')
modelfile.write('   & renormalisation, reduction_interoperation, &\n')
modelfile.write('   & reduction_interoperation_rescue, deltaOS, &\n')
modelfile.write('   & nlo_prefactors, convert_to_cdr')
modelfile.write('\n   implicit none\n')
modelfile.write('\n')
modelfile.write('   private :: ki\n')
modelfile.write('   private :: renormalisation, reduction_interoperation\n')
modelfile.write('   private :: reduction_interoperation_rescue\n')
modelfile.write('   private :: deltaOS, nlo_prefactors\n')
modelfile.write('\n')
modelfile.write('   real(ki), parameter :: sqrt2 = &\n')
modelfile.write('      &1.414213562373095048801688724209698078&\n')
modelfile.write('      &5696718753769480731766797379_ki\n')
modelfile.write('   real(ki), parameter :: sqrt3 = &\n')
modelfile.write('      &1.732050807568877293527446341505872366&\n')
modelfile.write('      &9428052538103806280558069795_ki\n')
modelfile.write('   real(ki) :: alpha =        0.007297352537600_ki\n')
modelfile.write('   real(ki) :: e =        0.302822120200000_ki\n')
modelfile.write('   complex(ki) :: gauge1z = (       0.000000000000000_ki,        0.000000000000000_ki)\n')
modelfile.write('   complex(ki) :: gauge2z = (       0.000000000000000_ki,        0.000000000000000_ki)\n')
modelfile.write('   real(ki) :: GF =        0.000011663700000_ki\n')
modelfile.write('   real(ki) :: gs =        1.000000000000000_ki\n')
modelfile.write('   real(ki) :: mB =        4.200000000000000_ki\n')
modelfile.write('   real(ki) :: mBMS =        4.200000000000000_ki\n')
modelfile.write('   real(ki) :: mC =        1.270000000000000_ki\n')
modelfile.write('   real(ki) :: mD =        0.000000000000000_ki\n')
modelfile.write('   real(ki) :: me =        0.000510998910000_ki\n')
modelfile.write('   real(ki) :: mH =      125.000000000000000_ki\n')
modelfile.write('   real(ki) :: mmu =        0.105658367000000_ki\n')
modelfile.write('   real(ki) :: mS =        0.104000000000000_ki\n')
modelfile.write('   real(ki) :: mT =      171.199999999999989_ki\n')
modelfile.write('   real(ki) :: mtau =        1.776840000000000_ki\n')
modelfile.write('   real(ki) :: mtauMS =        1.776840000000000_ki\n')
modelfile.write('   real(ki) :: mU =        0.000000000000000_ki\n')
modelfile.write('   real(ki) :: mW =       80.376000000000005_ki\n')
modelfile.write('   real(ki) :: mZ =       91.187600000000003_ki\n')
modelfile.write('   real(ki) :: NC =        3.000000000000000_ki\n')
modelfile.write('   real(ki) :: Nf =        5.000000000000000_ki\n')
modelfile.write('   real(ki) :: Nfgen =       -1.000000000000000_ki\n')
modelfile.write('   real(ki) :: sw =        0.480832611207000_ki\n')
modelfile.write('   real(ki) :: wB =        0.000000000000000_ki\n')
modelfile.write('   real(ki) :: wchi =        0.000000000000000_ki\n')
modelfile.write('   real(ki) :: wghWm =        0.000000000000000_ki\n')
modelfile.write('   real(ki) :: wghWp =        0.000000000000000_ki\n')
modelfile.write('   real(ki) :: wghZ =        0.000000000000000_ki\n')
modelfile.write('   real(ki),parameter :: wH =        0.000000000000000_ki\n')
modelfile.write('   real(ki) :: wphi =        0.000000000000000_ki\n')
modelfile.write('   real(ki) :: wT =        0.000000000000000_ki\n')
modelfile.write('   real(ki) :: wtau =        0.000000000000000_ki\n')
modelfile.write('   real(ki) :: wW =        2.124000000000000_ki\n')
modelfile.write('   real(ki) :: wZ =        2.495200000000000_ki\n')
modelfile.write('   real(ki) :: gUa\n')
modelfile.write('   real(ki) :: gWWZZ\n')
modelfile.write('   real(ki) :: gBa\n')
modelfile.write('   real(ki) :: gtauv\n')
modelfile.write('   real(ki) :: gWWZ\n')
modelfile.write('   real(ki) :: gtaur\n')
modelfile.write('   real(ki) :: gUl\n')
modelfile.write('   real(ki) :: gBv\n')
modelfile.write('   real(ki) :: gUr\n')
modelfile.write('   real(ki) :: gBr\n')
modelfile.write('   real(ki) :: gUv\n')
modelfile.write('   real(ki) :: gHZZ\n')
modelfile.write('   real(ki) :: gSa\n')
modelfile.write('   real(ki) :: gtaua\n')
modelfile.write('   real(ki) :: gW\n')
modelfile.write('   real(ki) :: gHHH\n')
modelfile.write('   real(ki) :: gntaur\n')
modelfile.write('   real(ki) :: gntauv\n')
modelfile.write('   real(ki) :: gAPP\n')
modelfile.write('   real(ki) :: gntaul\n')
modelfile.write('   real(ki) :: gntaua\n')
modelfile.write('   complex(ki) :: gGWX\n')
modelfile.write('   real(ki) :: gBl\n')
modelfile.write('   real(ki) :: gH\n')
modelfile.write('   real(ki) :: gCa\n')
modelfile.write('   real(ki) :: ger\n')
modelfile.write('   real(ki) :: gev\n')
modelfile.write('   real(ki) :: gHC\n')
modelfile.write('   real(ki) :: gCl\n')
modelfile.write('   real(ki) :: gGWH\n')
modelfile.write('   real(ki) :: gea\n')
modelfile.write('   real(ki) :: gCr\n')
modelfile.write('   real(ki) :: gCv\n')
modelfile.write('   real(ki) :: gel\n')
modelfile.write('   real(ki) :: gtaul\n')
modelfile.write('   real(ki) :: gPWZ\n')
modelfile.write('   real(ki) :: gDl\n')
modelfile.write('   real(ki) :: gZZPP\n')
modelfile.write('   real(ki) :: gHHHH\n')
modelfile.write('   real(ki) :: gZZHH\n')
modelfile.write('   real(ki) :: ef\n')
modelfile.write('   real(ki) :: gGZWP\n')
modelfile.write('   real(ki) :: gHXX\n')
modelfile.write('   real(ki) :: gWWPP\n')
modelfile.write('   real(ki) :: gDr\n')
modelfile.write('   real(ki) :: gDv\n')
modelfile.write('   real(ki) :: gGZH\n')
modelfile.write('   real(ki) :: gDa\n')
modelfile.write('   complex(ki) :: gWAPX\n')
modelfile.write('   real(ki) :: gHWW\n')
modelfile.write('   real(ki) :: gWWXX\n')
modelfile.write('   real(ki) :: gTa\n')
modelfile.write('   real(ki) :: gTl\n')
modelfile.write('   real(ki) :: gTr\n')
modelfile.write('   real(ki) :: gTv\n')
modelfile.write('   real(ki) :: gPtau\n')
modelfile.write('   real(ki) :: gHPP\n')
modelfile.write('   real(ki) :: gWWAZ\n')
modelfile.write('   real(ki) :: gWWAA\n')
modelfile.write('   real(ki) :: alphaf\n')
modelfile.write('   real(ki) :: gnmul\n')
modelfile.write('   real(ki) :: gAAPP\n')
modelfile.write('   real(ki) :: gHtau\n')
modelfile.write('   real(ki) :: gZ\n')
modelfile.write('   real(ki) :: gXmu\n')
modelfile.write('   real(ki) :: gHHPP\n')
modelfile.write('   real(ki) :: Nfrat\n')
modelfile.write('   real(ki) :: cw\n')
modelfile.write('   real(ki) :: gGWZP\n')
modelfile.write('   real(ki) :: gnmua\n')
modelfile.write('   real(ki) :: NA\n')
modelfile.write('   real(ki) :: gner\n')
modelfile.write('   real(ki) :: gSv\n')
modelfile.write('   real(ki) :: gnev\n')
modelfile.write('   real(ki) :: swf\n')
modelfile.write('   real(ki) :: gnmuv\n')
modelfile.write('   real(ki) :: mZf\n')
modelfile.write('   complex(ki) :: gZXH\n')
modelfile.write('   real(ki) :: gnmur\n')
modelfile.write('   real(ki) :: gnel\n')
modelfile.write('   real(ki) :: gHmu\n')
modelfile.write('   real(ki) :: gPPPP\n')
modelfile.write('   real(ki) :: gnea\n')
modelfile.write('   real(ki) :: gXtau\n')
modelfile.write('   real(ki) :: gWWHH\n')
modelfile.write('   real(ki) :: gWWWW\n')
modelfile.write('   real(ki) :: gWZPH\n')
modelfile.write('   real(ki) :: gHe\n')
modelfile.write('   complex(ki) :: gWZPX\n')
modelfile.write('   real(ki) :: gHHXX\n')
modelfile.write('   real(ki) :: gXD\n')
modelfile.write('   real(ki) :: gmur\n')
modelfile.write('   real(ki) :: gSr\n')
modelfile.write('   real(ki) :: gmuv\n')
modelfile.write('   real(ki) :: gXB\n')
modelfile.write('   real(ki) :: gXC\n')
modelfile.write('   real(ki) :: gXT\n')
modelfile.write('   real(ki) :: gXU\n')
modelfile.write('   real(ki) :: gmua\n')
modelfile.write('   real(ki) :: mWf\n')
modelfile.write('   real(ki) :: gXS\n')
modelfile.write('   real(ki) :: gSl\n')
modelfile.write('   real(ki) :: gmul\n')
modelfile.write('   real(ki) :: gHT\n')
modelfile.write('   real(ki) :: gHU\n')
modelfile.write('   real(ki) :: gHS\n')
modelfile.write('   real(ki) :: gWPH\n')
modelfile.write('   real(ki) :: gPWA\n')
modelfile.write('   real(ki) :: gHD\n')
modelfile.write('   real(ki) :: gZZXX\n')
modelfile.write('   real(ki) :: gHB\n')
modelfile.write('   real(ki) :: gPmu\n')
modelfile.write('   real(ki) :: gZPP\n')
modelfile.write('   real(ki) :: gXe\n')
modelfile.write('   real(ki) :: gPe\n')
modelfile.write('   real(ki) :: gWAPH\n')
modelfile.write('   real(ki) :: gXXXX\n')
modelfile.write('   real(ki) :: gAH\n')
modelfile.write('   real(ki) :: GFf\n')
modelfile.write('   real(ki) :: gPD\n')
modelfile.write('   real(ki) :: gPB\n')
modelfile.write('   real(ki) :: gPC\n')
modelfile.write('   real(ki) :: gXXPP\n')
modelfile.write('   real(ki) :: gAZPP\n')
modelfile.write('   real(ki) :: gPT\n')
modelfile.write('   real(ki) :: gPU\n')
modelfile.write('   complex(ki) :: gWPX\n')
modelfile.write('   real(ki) :: gPS\n')
modelfile.write('   integer, parameter, private :: line_length = 80\n')
#
#   ' what is our longest extra name ?
#   ' 0   0    1    1    2    2
#   ' 1---5----0----5----0----5
#   ' samurai_group_numerators
#   ' reduction_interoperation
#   ' samurai_verbatim
#   ' renormalisation
#   ' samurai_scalar
#   ' samurai_test
#   '
#   ' ==> the longest is 24
#
modelfile.write('   integer, parameter, private :: name_length = max(7,24)\n')
modelfile.write('   character(len=name_length), dimension(34) :: names = (/&\n')
modelfile.write('      & "alpha  "')
modelfile.write(', &\n')

modelfile.write('      & "e      "')
modelfile.write(', &\n')

modelfile.write('      & "gauge1z"')
modelfile.write(', &\n')

modelfile.write('      & "gauge2z"')
modelfile.write(', &\n')

modelfile.write('      & "GF     "')
modelfile.write(', &\n')

modelfile.write('      & "gs     "')
modelfile.write(', &\n')

modelfile.write('      & "mB     "')
modelfile.write(', &\n')

modelfile.write('      & "mBMS   "')
modelfile.write(', &\n')

modelfile.write('      & "mC     "')
modelfile.write(', &\n')

modelfile.write('      & "mD     "')
modelfile.write(', &\n')

modelfile.write('      & "me     "')
modelfile.write(', &\n')

modelfile.write('      & "mH     "')
modelfile.write(', &\n')

modelfile.write('      & "mmu    "')
modelfile.write(', &\n')

modelfile.write('      & "mS     "')
modelfile.write(', &\n')

modelfile.write('      & "mT     "')
modelfile.write(', &\n')

modelfile.write('      & "mtau   "')
modelfile.write(', &\n')

modelfile.write('      & "mtauMS "')
modelfile.write(', &\n')

modelfile.write('      & "mU     "')
modelfile.write(', &\n')

modelfile.write('      & "mW     "')
modelfile.write(', &\n')

modelfile.write('      & "mZ     "')
modelfile.write(', &\n')

modelfile.write('      & "NC     "')
modelfile.write(', &\n')

modelfile.write('      & "Nf     "')
modelfile.write(', &\n')

modelfile.write('      & "Nfgen  "')
modelfile.write(', &\n')

modelfile.write('      & "sw     "')
modelfile.write(', &\n')

modelfile.write('      & "wB     "')
modelfile.write(', &\n')

modelfile.write('      & "wchi   "')
modelfile.write(', &\n')

modelfile.write('      & "wghWm  "')
modelfile.write(', &\n')

modelfile.write('      & "wghWp  "')
modelfile.write(', &\n')

modelfile.write('      & "wghZ   "')
modelfile.write(', &\n')

modelfile.write('      & "wphi   "')
modelfile.write(', &\n')

modelfile.write('      & "wT     "')
modelfile.write(', &\n')

modelfile.write('      & "wtau   "')
modelfile.write(', &\n')

modelfile.write('      & "wW     "')
modelfile.write(', &\n')

modelfile.write('      & "wZ     "')
modelfile.write('/)\n')
   
modelfile.write('   character(len=1), dimension(3) :: cc = (/')
modelfile.write(' \'#\'')
modelfile.write(',')
modelfile.write(' \'!\'')
modelfile.write(',')
modelfile.write(' \';\'')
modelfile.write('/)\n')
modelfile.write('\n')

modelfile.write('   ! for automatic choosing the right EW scheme in set_parameters\n')
modelfile.write('   integer, private :: choosen_ew_parameters ! bit-set of EW parameters\n')
modelfile.write('   character(len=5), private, dimension(6) :: ew_parameters = &\n')
modelfile.write('          &(/\'mW   \',&\n')
modelfile.write('          &  \'mZ   \',&\n')
modelfile.write('          &  \'alpha\',&\n')
modelfile.write('          &  \'GF   \',&\n')
modelfile.write('          &  \'sw   \',&\n')
modelfile.write('          &  \'e    \'/)\n')
modelfile.write('   integer, private :: choosen_ew_parameters_count = 0 ! bitset of EW parameters\n')
modelfile.write('   integer, private :: orig_ewchoice = -1 ! saves the original ewchoice\n')

modelfile.write("   private :: digit, parsereal, names, cc\n")
modelfile.write("\n")
modelfile.write("contains\n")
modelfile.write("\n")

modelfile.write("!---#[ print_parameter:\n")
modelfile.write("   ! Print current parameters / setup to stdout or output_unit\n")
modelfile.write("   subroutine   print_parameter(verbose,output_unit)\n")
modelfile.write("      implicit none\n")
modelfile.write("      logical, intent(in), optional :: verbose\n")
modelfile.write("      integer, intent(in), optional :: output_unit\n")
modelfile.write("      logical :: is_verbose\n")
modelfile.write("      integer :: unit\n")
modelfile.write("\n")
modelfile.write("      real(ki), parameter :: pi = 3.14159265358979323846264&\n")
modelfile.write("     &3383279502884197169399375105820974944592307816406286209_ki\n")
modelfile.write("      is_verbose = .false.\n")
modelfile.write("      if(present(verbose)) then\n")
modelfile.write("          is_verbose = verbose\n")
modelfile.write("      end if\n")
modelfile.write("\n")
modelfile.write("      unit = 6 ! stdout\n")
modelfile.write("      if(present(output_unit)) then\n")
modelfile.write("          unit = output_unit\n")
modelfile.write("      end if\n")
modelfile.write("\n")
modelfile.write("\n")
modelfile.write("   write(unit,'(A1,1x,A26)') \"#\", \"--------- SETUP ---------\"\n")
modelfile.write("   write(unit,'(A1,1x,A18,I2)') \"#\", \"renormalisation = \", renormalisation\n")
modelfile.write("   if(convert_to_cdr) then\n")
modelfile.write("      write(unit,'(A1,1x,A9,A3)') \"#\", \"scheme = \", \"CDR\"\n")
modelfile.write("   else\n")
modelfile.write("      write(unit,'(A1,1x,A9,A4)') \"#\", \"scheme = \", \"DRED\"\n")
modelfile.write("   end if\n")
modelfile.write("   if(reduction_interoperation.eq.0) then\n")
modelfile.write("      write(unit,'(A1,1x,A15,A7)') \"#\", \"reduction with \", \"SAMURAI\"\n")
modelfile.write("   else if(reduction_interoperation.eq.1) then\n")
modelfile.write("      write(unit,'(A1,1x,A15,A7)') \"#\", \"reduction with \", \"GOLEM95\"\n")
modelfile.write("   else if(reduction_interoperation.eq.2) then\n")
modelfile.write("      write(unit,'(A1,1x,A15,A15)') \"#\", \"reduction with \", \"NINJA\"\n")
modelfile.write("   else if(reduction_interoperation.eq.3) then\n")
modelfile.write("      write(unit,'(A1,1x,A15,A5)') \"#\", \"reduction with \", \"PJFRY\"\n")
modelfile.write("   end if\n")
modelfile.write("   if(reduction_interoperation_rescue.ne.reduction_interoperation) then\n")
modelfile.write("      if(reduction_interoperation_rescue.eq.0) then\n")
modelfile.write("         write(unit,'(A1,1x,A15,A7)') \"#\", \"    --> rescue \", \"SAMURAI\"\n")
modelfile.write("      else if(reduction_interoperation_rescue.eq.1) then\n")
modelfile.write("         write(unit,'(A1,1x,A15,A7)') \"#\", \"    --> rescue \", \"GOLEM95\"\n")
modelfile.write("      else if(reduction_interoperation_rescue.eq.2) then\n")
modelfile.write("         write(unit,'(A1,1x,A15,A15)') \"#\", \"    --> rescue \", \"NINJA\"\n")
modelfile.write("      else if(reduction_interoperation_rescue.eq.3) then\n")
modelfile.write("         write(unit,'(A1,1x,A15,A5)') \"#\", \"    --> rescue \", \"PJFRY\"\n")
modelfile.write("      end if\n")
modelfile.write("   end if\n")

modelfile.write("    write(unit,'(A1,1x,A11,I2)') \"#\", \"ewchoice = \", ewchoice\n")
modelfile.write("   write(unit,'(A1,1x,A21)') \"#\", \"--- ALL PARAMETERS ---\"\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16)') \"#\", \"alpha= \", alpha\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16)') \"#\", \"e    = \", e\n")

modelfile.write("   write(unit,'(A1,1x,A11,\"(\",G23.16,G23.16,\")\")') \"#\", \"gauge1z= \", gauge1z\n")

modelfile.write("   write(unit,'(A1,1x,A11,\"(\",G23.16,G23.16,\")\")') \"#\", \"gauge2z= \", gauge2z\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16)') \"#\", \"GF   = \", GF\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16)') \"#\", \"gs   = \", gs\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16)') \"#\", \"mB   = \", mB\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16)') \"#\", \"mBMS = \", mBMS\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16)') \"#\", \"mC   = \", mC\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16)') \"#\", \"mD   = \", mD\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16)') \"#\", \"me   = \", me\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16)') \"#\", \"mH   = \", mH\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16)') \"#\", \"mmu  = \", mmu\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16)') \"#\", \"mS   = \", mS\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16)') \"#\", \"mT   = \", mT\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16)') \"#\", \"mtau = \", mtau\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16)') \"#\", \"mtauMS= \", mtauMS\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16)') \"#\", \"mU   = \", mU\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16)') \"#\", \"mW   = \", mW\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16)') \"#\", \"mZ   = \", mZ\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16)') \"#\", \"NC   = \", NC\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16)') \"#\", \"Nf   = \", Nf\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16)') \"#\", \"Nfgen= \", Nfgen\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16)') \"#\", \"sw   = \", sw\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16)') \"#\", \"wB   = \", wB\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16)') \"#\", \"wchi = \", wchi\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16)') \"#\", \"wghWm= \", wghWm\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16)') \"#\", \"wghWp= \", wghWp\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16)') \"#\", \"wghZ = \", wghZ\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"const.\")') \"#\", \"wH   = \", wH\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16)') \"#\", \"wphi = \", wphi\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16)') \"#\", \"wT   = \", wT\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16)') \"#\", \"wtau = \", wtau\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16)') \"#\", \"wW   = \", wW\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16)') \"#\", \"wZ   = \", wZ\n")

modelfile.write("   if(is_verbose) then\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gUa  = \", gUa\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gWWZZ= \", gWWZZ\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gBa  = \", gBa\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gtauv= \", gtauv\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gWWZ = \", gWWZ\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gtaur= \", gtaur\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gUl  = \", gUl\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gBv  = \", gBv\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gUr  = \", gUr\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gBr  = \", gBr\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gUv  = \", gUv\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gHZZ = \", gHZZ\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gSa  = \", gSa\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gtaua= \", gtaua\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gW   = \", gW\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gHHH = \", gHHH\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gntaur= \", gntaur\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gntauv= \", gntauv\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gAPP = \", gAPP\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gntaul= \", gntaul\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gntaua= \", gntaua\n")

modelfile.write("   write(unit,'(A1,1x,A11,\"(\",G23.16,G23.16,\")\",\" calc.\")') \"#\", \"gGWX = \", gGWX\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gBl  = \", gBl\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gH   = \", gH\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gCa  = \", gCa\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"ger  = \", ger\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gev  = \", gev\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gHC  = \", gHC\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gCl  = \", gCl\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gGWH = \", gGWH\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gea  = \", gea\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gCr  = \", gCr\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gCv  = \", gCv\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gel  = \", gel\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gtaul= \", gtaul\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gPWZ = \", gPWZ\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gDl  = \", gDl\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gZZPP= \", gZZPP\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gHHHH= \", gHHHH\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gZZHH= \", gZZHH\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"ef   = \", ef\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gGZWP= \", gGZWP\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gHXX = \", gHXX\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gWWPP= \", gWWPP\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gDr  = \", gDr\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gDv  = \", gDv\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gGZH = \", gGZH\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gDa  = \", gDa\n")

modelfile.write("   write(unit,'(A1,1x,A11,\"(\",G23.16,G23.16,\")\",\" calc.\")') \"#\", \"gWAPX= \", gWAPX\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gHWW = \", gHWW\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gWWXX= \", gWWXX\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gTa  = \", gTa\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gTl  = \", gTl\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gTr  = \", gTr\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gTv  = \", gTv\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gPtau= \", gPtau\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gHPP = \", gHPP\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gWWAZ= \", gWWAZ\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gWWAA= \", gWWAA\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"alphaf= \", alphaf\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gnmul= \", gnmul\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gAAPP= \", gAAPP\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gHtau= \", gHtau\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gZ   = \", gZ\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gXmu = \", gXmu\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gHHPP= \", gHHPP\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"Nfrat= \", Nfrat\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"cw   = \", cw\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gGWZP= \", gGWZP\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gnmua= \", gnmua\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"NA   = \", NA\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gner = \", gner\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gSv  = \", gSv\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gnev = \", gnev\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"swf  = \", swf\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gnmuv= \", gnmuv\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"mZf  = \", mZf\n")

modelfile.write("   write(unit,'(A1,1x,A11,\"(\",G23.16,G23.16,\")\",\" calc.\")') \"#\", \"gZXH = \", gZXH\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gnmur= \", gnmur\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gnel = \", gnel\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gHmu = \", gHmu\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gPPPP= \", gPPPP\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gnea = \", gnea\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gXtau= \", gXtau\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gWWHH= \", gWWHH\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gWWWW= \", gWWWW\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gWZPH= \", gWZPH\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gHe  = \", gHe\n")

modelfile.write("   write(unit,'(A1,1x,A11,\"(\",G23.16,G23.16,\")\",\" calc.\")') \"#\", \"gWZPX= \", gWZPX\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gHHXX= \", gHHXX\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gXD  = \", gXD\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gmur = \", gmur\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gSr  = \", gSr\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gmuv = \", gmuv\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gXB  = \", gXB\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gXC  = \", gXC\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gXT  = \", gXT\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gXU  = \", gXU\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gmua = \", gmua\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"mWf  = \", mWf\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gXS  = \", gXS\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gSl  = \", gSl\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gmul = \", gmul\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gHT  = \", gHT\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gHU  = \", gHU\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gHS  = \", gHS\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gWPH = \", gWPH\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gPWA = \", gPWA\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gHD  = \", gHD\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gZZXX= \", gZZXX\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gHB  = \", gHB\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gPmu = \", gPmu\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gZPP = \", gZPP\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gXe  = \", gXe\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gPe  = \", gPe\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gWAPH= \", gWAPH\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gXXXX= \", gXXXX\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gAH  = \", gAH\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"GFf  = \", GFf\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gPD  = \", gPD\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gPB  = \", gPB\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gPC  = \", gPC\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gXXPP= \", gXXPP\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gAZPP= \", gAZPP\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gPT  = \", gPT\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gPU  = \", gPU\n")

modelfile.write("   write(unit,'(A1,1x,A11,\"(\",G23.16,G23.16,\")\",\" calc.\")') \"#\", \"gWPX = \", gWPX\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"gPS  = \", gPS\n")

modelfile.write("   end if\n")

modelfile.write("   write(unit,'(A1,1x,A25)') \"#\", \"-------------------------\"\n")
modelfile.write("   end subroutine\n")
modelfile.write("!---#] print_parameter:\n")

modelfile.write("   function     digit(ch, lnr) result(d)\n")
modelfile.write("      implicit none\n")
modelfile.write("      character(len=1), intent(in) :: ch\n")
modelfile.write("      integer, intent(in) :: lnr\n")
modelfile.write("      integer :: d\n")
modelfile.write("      d = -1\n")
modelfile.write("      select case(ch)\n")
modelfile.write("         case(\'0\')\n")
modelfile.write("            d = 0\n")
modelfile.write("         case(\'1\')\n")
modelfile.write("            d = 1\n")
modelfile.write("         case(\'2\')\n")
modelfile.write("            d = 2\n")
modelfile.write("         case(\'3\')\n")
modelfile.write("            d = 3\n")
modelfile.write("         case(\'4\')\n")
modelfile.write("            d = 4\n")
modelfile.write("         case(\'5\')\n")
modelfile.write("            d = 5\n")
modelfile.write("         case(\'6\')\n")
modelfile.write("            d = 6\n")
modelfile.write("         case(\'7\')\n")
modelfile.write("            d = 7\n")
modelfile.write("         case(\'8\')\n")
modelfile.write("            d = 8\n")
modelfile.write("         case(\'9\')\n")
modelfile.write("            d = 9\n")
modelfile.write("         case default\n")
modelfile.write("            write(*,'(A21,1x,I5)') 'invalid digit in line', lnr\n")
modelfile.write("         end select\n")
modelfile.write("   end function digit\n")
modelfile.write("\n")
modelfile.write("   function     parsereal(str, ierr, lnr) result(num)\n")
modelfile.write("      implicit none\n")
modelfile.write("      character(len=*), intent(in) :: str\n")
modelfile.write("      integer, intent(out) :: ierr\n")
modelfile.write("      integer, intent(in) :: lnr\n")
modelfile.write("      integer, dimension(0:3,0:4), parameter :: DFA = &\n")
modelfile.write("      & reshape( (/1,  1,  2, -1,   & ! state = 0\n")
modelfile.write("      &            1, -1,  2,  3,   & ! state = 1\n")
modelfile.write("      &            2, -1, -1,  3,   & ! state = 2\n")
modelfile.write("      &            4,  4, -1, -1,   & ! state = 3\n")
modelfile.write("      &            4, -1, -1, -1/), (/4, 5/))\n")
modelfile.write("      real(ki) :: num\n")
modelfile.write("      integer :: i, expo, ofs, state, cclass, d, s1, s2\n")
modelfile.write("      num = 0.0_ki\n")
modelfile.write("      expo = 0\n")
modelfile.write("      state = 0\n")
modelfile.write("      ofs = 0\n")
modelfile.write("      s1 = 1\n")
modelfile.write("      s2 = 1\n")
modelfile.write("      d = -1\n")
modelfile.write("      cclass = -1\n")
modelfile.write("      do i=1,len(str)\n")
modelfile.write("         select case(str(i:i))\n")
modelfile.write("         case('_', '''', ' ')\n")
modelfile.write("            cycle\n")
modelfile.write("         case('+', '-')\n")
modelfile.write("            cclass = 1\n")
modelfile.write("         case('.')\n")
modelfile.write("            cclass = 2\n")
modelfile.write("         case('E', 'e')\n")
modelfile.write("            cclass = 3\n")
modelfile.write("         case default\n")
modelfile.write("            cclass = 0\n")
modelfile.write("            d = digit(str(i:i), lnr)\n")
modelfile.write("            if (d .eq. -1) then\n")
modelfile.write("               ierr = 1\n")
modelfile.write("               return\n")
modelfile.write("            end if\n")
modelfile.write("         end select\n")
modelfile.write("         if (cclass .eq. 0) then\n")
modelfile.write("            select case(state)\n")
modelfile.write("            case(0, 1)\n")
modelfile.write("               num = 10.0_ki * num + d\n")
modelfile.write("            case(2)\n")
modelfile.write("               num = 10.0_ki * num + d\n")
modelfile.write("               ofs = ofs - 1\n")
modelfile.write("            case(4)\n")
modelfile.write("               expo = 10 * expo + d\n")
modelfile.write("            end select\n")
modelfile.write("         elseif ((cclass .eq. 1) .and. (str(i:i) .eq. '-')) then\n")
modelfile.write("            if (state .eq. 0) then\n")
modelfile.write("               s1 = -1\n")
modelfile.write("            else\n")
modelfile.write("               s2 = -1\n")
modelfile.write("            endif\n")
modelfile.write("         end if\n")
modelfile.write("         ! Advance in the DFA\n")
modelfile.write("         state = DFA(cclass, state)\n")
modelfile.write("         if (state < 0) then\n")
modelfile.write("            write(*,'(A21,1x,A1,1x,A7,I5)') 'invalid position for', &\n")
modelfile.write("            & str(i:i), 'in line', lnr\n")
modelfile.write("            ierr = 1\n")
modelfile.write("            return\n")
modelfile.write("         end if\n")
modelfile.write("      end do\n")
modelfile.write("      num = s1 * num * 10.0_ki**(ofs + s2 * expo)\n")
modelfile.write("      ierr = 0\n")
modelfile.write("   end function parsereal\n")
modelfile.write("\n")
modelfile.write("   subroutine     parseline(line,stat,line_number)\n")
modelfile.write("      implicit none\n")
modelfile.write("      character(len=*), intent(in) :: line\n")
modelfile.write("      integer, intent(out) :: stat\n")
modelfile.write("      integer, intent(in), optional :: line_number\n")
modelfile.write("\n")
modelfile.write("      character(len=line_length) :: rvalue, ivalue, value\n")
modelfile.write("      character(len=name_length) :: name\n")
modelfile.write("      real(ki) :: re, im\n")
modelfile.write("      integer :: idx, icomma, idx1, idx2, lnr, nidx, ierr, pdg\n")
modelfile.write("\n")
modelfile.write("      if(present(line_number)) then\n")
modelfile.write("         lnr = line_number\n")
modelfile.write("      else\n")
modelfile.write("         lnr = 0\n")
modelfile.write("      end if\n")
modelfile.write("\n")
modelfile.write("      idx = scan(line, '=', .false.)\n")
modelfile.write("      if (idx .eq. 0) then\n")
modelfile.write("         if(present(line_number)) then\n")
modelfile.write("            write(*,'(A13,1x,I5)') 'error at line', line_number\n")
modelfile.write("         else\n")
modelfile.write("            write(*,'(A18)') 'error in parseline'\n")
modelfile.write("         end if\n")
modelfile.write("         stat = 1\n")
modelfile.write("         return\n")
modelfile.write("      end if\n")
modelfile.write("      name = adjustl(line(1:idx-1))\n")
modelfile.write("      value = adjustl(line(idx+1:len(line)))\n")
modelfile.write("      idx = scan(value, ',', .false.)\n")
modelfile.write("\n")
modelfile.write("      if (name .eq. \"renormalisation\") then\n")
modelfile.write("         re = parsereal(value, ierr, lnr)\n")
modelfile.write("         if (ierr .ne. 0) then\n")
modelfile.write("            stat = 1\n")
modelfile.write("            return\n")
modelfile.write("         end if\n")
modelfile.write("         renormalisation = int(re)\n")
modelfile.write("      elseif (name .eq. \"nlo_prefactors\") then\n")
modelfile.write("         re = parsereal(value, ierr, lnr)\n")
modelfile.write("         if (ierr .ne. 0) then\n")
modelfile.write("            stat = 1\n")
modelfile.write("            return\n")
modelfile.write("         end if\n")
modelfile.write("         nlo_prefactors = int(re)\n")
modelfile.write("      elseif (name .eq. \"deltaOS\") then\n")
modelfile.write("         re = parsereal(value, ierr, lnr)\n")
modelfile.write("         if (ierr .ne. 0) then\n")
modelfile.write("            stat = 1\n")
modelfile.write("            return\n")
modelfile.write("         end if\n")
modelfile.write("         deltaOS = int(re)\n")
modelfile.write("      elseif (name .eq. \"reduction_interoperation\") then\n")
modelfile.write("         re = parsereal(value, ierr, lnr)\n")
modelfile.write("         if (ierr .ne. 0) then\n")
modelfile.write("            stat = 1\n")
modelfile.write("            return\n")
modelfile.write("         end if\n")
modelfile.write("         reduction_interoperation = int(re)\n")
modelfile.write("      elseif (any(names .eq. name)) then\n")
modelfile.write("         do nidx=1,size(names)\n")
modelfile.write("            if (names(nidx) .eq. name) exit\n")
modelfile.write("         end do\n")
modelfile.write("         if (idx .gt. 0) then\n")
modelfile.write("            rvalue = value(1:idx-1)\n")
modelfile.write("            ivalue = value(idx+1:len(value))\n")
modelfile.write("            re = parsereal(rvalue, ierr, lnr)\n")
modelfile.write("            if (ierr .ne. 0) then\n")
modelfile.write("               stat = 1\n")
modelfile.write("               return\n")
modelfile.write("            end if\n")
modelfile.write("            im = parsereal(ivalue, ierr, lnr)\n")
modelfile.write("            if (ierr .ne. 0) then\n")
modelfile.write("               stat = 1\n")
modelfile.write("               return\n")
modelfile.write("            end if\n")
modelfile.write("         else\n")
modelfile.write("            re = parsereal(value, ierr, lnr)\n")
modelfile.write("            if (ierr .ne. 0) then\n")
modelfile.write("               stat = 1\n")
modelfile.write("               return\n")
modelfile.write("            end if\n")
modelfile.write("            im = 0.0_ki\n")
modelfile.write("         end if\n")
modelfile.write("         select case (nidx)\n")
modelfile.write("         case(1)\n")
modelfile.write("            alpha = ")
modelfile.write("re\n")
modelfile.write("         case(2)\n")
modelfile.write("            e = ")
modelfile.write("re\n")
modelfile.write("         case(3)\n")
modelfile.write("            gauge1z = ")
modelfile.write("cmplx(re, im, ki)\n")
modelfile.write("         case(4)\n")
modelfile.write("            gauge2z = ")
modelfile.write("cmplx(re, im, ki)\n")
modelfile.write("         case(5)\n")
modelfile.write("            GF = ")
modelfile.write("re\n")
modelfile.write("         case(6)\n")
modelfile.write("            gs = ")
modelfile.write("re\n")
modelfile.write("         case(7)\n")
modelfile.write("            mB = ")
modelfile.write("re\n")
modelfile.write("         case(8)\n")
modelfile.write("            mBMS = ")
modelfile.write("re\n")
modelfile.write("         case(9)\n")
modelfile.write("            mC = ")
modelfile.write("re\n")
modelfile.write("         case(10)\n")
modelfile.write("            mD = ")
modelfile.write("re\n")
modelfile.write("         case(11)\n")
modelfile.write("            me = ")
modelfile.write("re\n")
modelfile.write("         case(12)\n")
modelfile.write("            mH = ")
modelfile.write("re\n")
modelfile.write("         case(13)\n")
modelfile.write("            mmu = ")
modelfile.write("re\n")
modelfile.write("         case(14)\n")
modelfile.write("            mS = ")
modelfile.write("re\n")
modelfile.write("         case(15)\n")
modelfile.write("            mT = ")
modelfile.write("re\n")
modelfile.write("         case(16)\n")
modelfile.write("            mtau = ")
modelfile.write("re\n")
modelfile.write("         case(17)\n")
modelfile.write("            mtauMS = ")
modelfile.write("re\n")
modelfile.write("         case(18)\n")
modelfile.write("            mU = ")
modelfile.write("re\n")
modelfile.write("         case(19)\n")
modelfile.write("            mW = ")
modelfile.write("re\n")
modelfile.write("         case(20)\n")
modelfile.write("            mZ = ")
modelfile.write("re\n")
modelfile.write("         case(21)\n")
modelfile.write("            NC = ")
modelfile.write("re\n")
modelfile.write("         case(22)\n")
modelfile.write("            Nf = ")
modelfile.write("re\n")
modelfile.write("         case(23)\n")
modelfile.write("            Nfgen = ")
modelfile.write("re\n")
modelfile.write("         case(24)\n")
modelfile.write("            sw = ")
modelfile.write("re\n")
modelfile.write("         case(25)\n")
modelfile.write("            wB = ")
modelfile.write("re\n")
modelfile.write("         case(26)\n")
modelfile.write("            wchi = ")
modelfile.write("re\n")
modelfile.write("         case(27)\n")
modelfile.write("            wghWm = ")
modelfile.write("re\n")
modelfile.write("         case(28)\n")
modelfile.write("            wghWp = ")
modelfile.write("re\n")
modelfile.write("         case(29)\n")
modelfile.write("            wghZ = ")
modelfile.write("re\n")
modelfile.write("         case(30)\n")
modelfile.write("            wphi = ")
modelfile.write("re\n")
modelfile.write("         case(31)\n")
modelfile.write("            wT = ")
modelfile.write("re\n")
modelfile.write("         case(32)\n")
modelfile.write("            wtau = ")
modelfile.write("re\n")
modelfile.write("         case(33)\n")
modelfile.write("            wW = ")
modelfile.write("re\n")
modelfile.write("         case(34)\n")
modelfile.write("            wZ = ")
modelfile.write("re\n")
modelfile.write("         end select\n")
modelfile.write('      elseif (name(1:5).eq."mass(") then\n')
modelfile.write("         idx = scan(name, ')', .false.)\n")
modelfile.write("         if (idx.eq.0) then\n")
modelfile.write("            if(present(line_number)) then\n")
modelfile.write("               write(*,'(A13,1x,I5)') 'error at line', line_number\n")
modelfile.write("            else\n")
modelfile.write("               write(*,'(A18)') 'error in parseline'\n")
modelfile.write("            end if\n")
modelfile.write("            stat = 1\n")
modelfile.write("            return\n")
modelfile.write("         endif\n")
modelfile.write("         read(name(6:idx-1),*, iostat=ierr) pdg\n")
modelfile.write("         if (ierr.ne.0) then\n")
modelfile.write("            write(*,*) \"Not an integer:\", name(6:idx-1)\n")
modelfile.write("            if(present(line_number)) then\n")
modelfile.write("               write(*,'(A13,1x,I5)') 'error at line', line_number\n")
modelfile.write("            else\n")
modelfile.write("               write(*,'(A18)') 'error in parseline'\n")
modelfile.write("            end if\n")
modelfile.write("            stat = 1\n")
modelfile.write("            return\n")
modelfile.write("         end if\n")
modelfile.write("         select case(pdg)\n")
modelfile.write("            case(1)\n")
modelfile.write("               mD = parsereal(value, ierr, lnr)\n")
modelfile.write("            case(2)\n")
modelfile.write("               mU = parsereal(value, ierr, lnr)\n")
modelfile.write("            case(3)\n")
modelfile.write("               mS = parsereal(value, ierr, lnr)\n")
modelfile.write("            case(4)\n")
modelfile.write("               mC = parsereal(value, ierr, lnr)\n")
modelfile.write("            case(5)\n")
modelfile.write("               mB = parsereal(value, ierr, lnr)\n")
modelfile.write("            case(6)\n")
modelfile.write("               mT = parsereal(value, ierr, lnr)\n")
modelfile.write("            case(11)\n")
modelfile.write("               me = parsereal(value, ierr, lnr)\n")
modelfile.write("            case(13)\n")
modelfile.write("               mmu = parsereal(value, ierr, lnr)\n")
modelfile.write("            case(15)\n")
modelfile.write("               mtau = parsereal(value, ierr, lnr)\n")
modelfile.write("            case(23)\n")
modelfile.write("               mZ = parsereal(value, ierr, lnr)\n")
modelfile.write("            case(24)\n")
modelfile.write("               mW = parsereal(value, ierr, lnr)\n")
modelfile.write("            case(25)\n")
modelfile.write("               mH = parsereal(value, ierr, lnr)\n")
modelfile.write("            case default\n")
modelfile.write("               write(*,'(A20,1x,I10)') \"Cannot set mass for code:\", pdg\n")
modelfile.write("               stat = 1\n")
modelfile.write("               return\n")
modelfile.write("         end select\n")
modelfile.write('      elseif (name(1:6).eq."decay(") then\n')
modelfile.write("         idx = scan(name, ')', .false.)\n")
modelfile.write("         if (idx.eq.0) then\n")
modelfile.write("            if(present(line_number)) then\n")
modelfile.write("               write(*,'(A13,1x,I5)') 'error at line', line_number\n")
modelfile.write("            else\n")
modelfile.write("               write(*,'(A18)') 'error in parseline'\n")
modelfile.write("            end if\n")
modelfile.write("            stat = 1\n")
modelfile.write("            return\n")
modelfile.write("         endif\n")
modelfile.write("         read(name(7:idx-1),*, iostat=ierr) pdg\n")
modelfile.write("         if (ierr.ne.0) then\n")
modelfile.write("            write(*,*) \"Not an integer:\", name(7:idx-1)\n")
modelfile.write("            if(present(line_number)) then\n")
modelfile.write("               write(*,'(A13,1x,I5)') 'error at line', line_number\n")
modelfile.write("            else\n")
modelfile.write("               write(*,'(A18)') 'error in parseline'\n")
modelfile.write("            end if\n")
modelfile.write("            stat = 1\n")
modelfile.write("            return\n")
modelfile.write("         end if\n")
modelfile.write("         select case(pdg)\n")
modelfile.write("            case(9000003)\n")
modelfile.write("               wghZ = parsereal(value, ierr, lnr)\n")
modelfile.write("            case(9000004)\n")
modelfile.write("               wghWp = parsereal(value, ierr, lnr)\n")
modelfile.write("            case(5)\n")
modelfile.write("               wB = parsereal(value, ierr, lnr)\n")
modelfile.write("            case(6)\n")
modelfile.write("               wT = parsereal(value, ierr, lnr)\n")
modelfile.write("            case(15)\n")
modelfile.write("               wtau = parsereal(value, ierr, lnr)\n")
modelfile.write("            case(23)\n")
modelfile.write("               wZ = parsereal(value, ierr, lnr)\n")
modelfile.write("            case(24)\n")
modelfile.write("               wW = parsereal(value, ierr, lnr)\n")
modelfile.write("            case(250)\n")
modelfile.write("               wchi = parsereal(value, ierr, lnr)\n")
modelfile.write("            case(251)\n")
modelfile.write("               wphi = parsereal(value, ierr, lnr)\n")
modelfile.write("            case(9000005)\n")
modelfile.write("               wghWm = parsereal(value, ierr, lnr)\n")
modelfile.write("            case default\n")
modelfile.write("               write(*,'(A20,1x,I10)') \"Cannot set decay for code:\", pdg\n")
modelfile.write("               stat = 1\n")
modelfile.write("               return\n")
modelfile.write("         end select\n")
modelfile.write('      elseif (name(1:2).eq.\"m(\" .or. name(1:2).eq.\"w(\") then\n')
modelfile.write("         idx = scan(name, ')', .false.)\n")
modelfile.write("         if (idx.eq.0) then\n")
modelfile.write("            if(present(line_number)) then\n")
modelfile.write("               write(*,'(A13,1x,I5)') 'error at line', line_number\n")
modelfile.write("            else\n")
modelfile.write("               write(*,'(A18)') 'error in parseline'\n")
modelfile.write("            end if\n")
modelfile.write("            stat = 1\n")
modelfile.write("            return\n")
modelfile.write("         endif\n")
modelfile.write("         read(name(3:idx-1),*, iostat=ierr) pdg\n")
modelfile.write("         if (ierr.ne.0) then\n")
modelfile.write('            write(*,*) "pdg is not an integer:", name(3:idx-1)\n')
modelfile.write("            if(present(line_number)) then\n")
modelfile.write("               write(*,'(A13,1x,I5)') 'error at line', line_number\n")
modelfile.write("            else\n")
modelfile.write("               write(*,'(A18)') 'error in parseline'\n")
modelfile.write("            end if\n")
modelfile.write("            stat = 1\n")
modelfile.write("            return\n")
modelfile.write("         end if\n")
modelfile.write("         if (name(1:1).eq.\"m\") then\n")
modelfile.write("            ! set mass according to PDG code\n")
modelfile.write("            select case(pdg)\n")
modelfile.write("            case(1)\n")
modelfile.write("               mD = parsereal(value, ierr, lnr)\n")
modelfile.write("            case(2)\n")
modelfile.write("               mU = parsereal(value, ierr, lnr)\n")
modelfile.write("            case(3)\n")
modelfile.write("               mS = parsereal(value, ierr, lnr)\n")
modelfile.write("            case(4)\n")
modelfile.write("               mC = parsereal(value, ierr, lnr)\n")
modelfile.write("            case(5)\n")
modelfile.write("               mB = parsereal(value, ierr, lnr)\n")
modelfile.write("            case(6)\n")
modelfile.write("               mT = parsereal(value, ierr, lnr)\n")
modelfile.write("            case(11)\n")
modelfile.write("               me = parsereal(value, ierr, lnr)\n")
modelfile.write("            case(13)\n")
modelfile.write("               mmu = parsereal(value, ierr, lnr)\n")
modelfile.write("            case(15)\n")
modelfile.write("               mtau = parsereal(value, ierr, lnr)\n")
modelfile.write("            case(23)\n")
modelfile.write("               mZ = parsereal(value, ierr, lnr)\n")
modelfile.write("            case(24)\n")
modelfile.write("               mW = parsereal(value, ierr, lnr)\n")
modelfile.write("            case(25)\n")
modelfile.write("               mH = parsereal(value, ierr, lnr)\n")
modelfile.write("            case default\n")
modelfile.write("               write(*,'(A20,1x,I10)') \"Cannot set mass for PDG code:\", pdg\n")
modelfile.write("               stat = 1\n")
modelfile.write("               return\n")
modelfile.write("            end select\n")
modelfile.write("         else\n")
modelfile.write("            ! set width according to PDG code\n")
modelfile.write("            select case(pdg)\n")
modelfile.write("            case(9000003)\n")
modelfile.write("               wghZ = parsereal(value, ierr, lnr)\n")
modelfile.write("            case(9000004)\n")
modelfile.write("               wghWp = parsereal(value, ierr, lnr)\n")
modelfile.write("            case(5)\n")
modelfile.write("               wB = parsereal(value, ierr, lnr)\n")
modelfile.write("            case(6)\n")
modelfile.write("               wT = parsereal(value, ierr, lnr)\n")
modelfile.write("            case(15)\n")
modelfile.write("               wtau = parsereal(value, ierr, lnr)\n")
modelfile.write("            case(23)\n")
modelfile.write("               wZ = parsereal(value, ierr, lnr)\n")
modelfile.write("            case(24)\n")
modelfile.write("               wW = parsereal(value, ierr, lnr)\n")
modelfile.write("            case(250)\n")
modelfile.write("               wchi = parsereal(value, ierr, lnr)\n")
modelfile.write("            case(251)\n")
modelfile.write("               wphi = parsereal(value, ierr, lnr)\n")
modelfile.write("            case(9000005)\n")
modelfile.write("               wghWm = parsereal(value, ierr, lnr)\n")
modelfile.write("            case default\n")
modelfile.write("               write(*,'(A20,1x,I10)') \"Cannot set width for PDG code:\", pdg\n")
modelfile.write("               stat = 1\n")
modelfile.write("               return\n")
modelfile.write("            end select\n")
modelfile.write("         endif\n")
modelfile.write("      else\n")
modelfile.write("         write(*,'(A20,1x,A20)') 'Unrecognized option:', name\n")
modelfile.write("         stat = 1\n")
modelfile.write("         return\n")
modelfile.write("      end if\n")
modelfile.write("      stat = 0\n")
modelfile.write("   end subroutine parseline\n")
modelfile.write("\n")
modelfile.write("   subroutine     parse(aunit)\n")
modelfile.write("      implicit none\n")
modelfile.write("      integer, intent(in) :: aunit\n")
modelfile.write("      character(len=line_length) :: line\n")
modelfile.write("      integer :: ios, lnr\n")
modelfile.write("      lnr = 0\n")
modelfile.write("      loop1: do\n")
modelfile.write("         read(unit=aunit,fmt='(A80)',iostat=ios) line\n")
modelfile.write("         if(ios .ne. 0) exit\n")
modelfile.write("         lnr = lnr + 1\n")
modelfile.write("         line = adjustl(line)\n")
modelfile.write("         if (line .eq. '') cycle loop1\n")
modelfile.write("         if (any(cc .eq. line(1:1))) cycle loop1\n")
modelfile.write("\n")
modelfile.write("         call parseline(line,ios,lnr)\n")
modelfile.write("         if(ios .ne. 0) then\n")
modelfile.write("            write(*,'(A44,I2,A1)') &\n")
modelfile.write("            & 'Error while reading parameter file in parse(', aunit, ')'\n")
modelfile.write("         end if\n")
modelfile.write("      end do loop1\n")
modelfile.write("   end subroutine parse\n")
modelfile.write("!---#[ SLHA READER:\n")
modelfile.write("   subroutine     read_slha(ch, ierr)\n")
modelfile.write("      implicit none\n")
modelfile.write("      integer, intent(in) :: ch\n")
modelfile.write("      integer, intent(out), optional :: ierr\n")
modelfile.write("\n")
modelfile.write("      integer :: lnr, i, l, ofs, ios\n")
modelfile.write("      character(len=255) :: line\n")
modelfile.write("\n")
modelfile.write("      integer :: block\n")
modelfile.write("\n")
modelfile.write("      ofs = iachar('A') - iachar('a')\n")
modelfile.write("\n")
modelfile.write("      lnr = 0\n")
modelfile.write("      loop1: do\n")
modelfile.write("         read(unit=ch,fmt='(A80)',iostat=ios) line\n")
modelfile.write("         if(ios .ne. 0) exit\n")
modelfile.write("         lnr = lnr + 1\n")
modelfile.write("\n")
modelfile.write("         i = scan(line, '#', .false.)\n")
modelfile.write("         if (i .eq. 0) then\n")
modelfile.write("            l = len_trim(line)\n")
modelfile.write("         else\n")
modelfile.write("            l = i - 1\n")
modelfile.write("         end if\n")
modelfile.write("\n")
modelfile.write("         if (l .eq. 0) cycle loop1\n")
modelfile.write("\n")
modelfile.write("         ucase: do i = 1, l\n")
modelfile.write("            if (line(i:i) >= 'a' .and. line(i:i) <= 'z') then\n")
modelfile.write("               line(i:i) = achar(iachar(line(i:i))+ofs)\n")
modelfile.write("            end if\n")
modelfile.write("         end do ucase\n")
modelfile.write("\n")
modelfile.write("         if (line(1:1) .eq. 'B') then\n")
modelfile.write("            if (line(1:5) .eq. 'BLOCK') then\n")
modelfile.write("               line = adjustl(line(6:l))\n")
modelfile.write("               do i=1,l\n")
modelfile.write("                 if (line(i:i) <= ' ') exit\n")
modelfile.write("               end do\n")
modelfile.write("               l = i\n")
               
modelfile.write("           if (\"MASS\" .eq. line(1:l)) then\n")
modelfile.write("                  block = 0\n")
               
modelfile.write("           else")
modelfile.write("           if (\"DECAY\" .eq. line(1:l)) then\n")
modelfile.write("                  block = 1\n")
modelfile.write("               else\n")
modelfile.write("                  block = -1\n")
modelfile.write("               end if\n")
modelfile.write("            else\n")
modelfile.write("               write(*,'(A37,I5)') \"Illegal statement in SLHA file, line \", lnr\n")
modelfile.write("               if (present(ierr)) ierr = 1\n")
modelfile.write("               return\n")
modelfile.write("            end if\n")
modelfile.write("         elseif (line(1:1) .eq. 'D') then\n")
modelfile.write("            if (line(1:5) .eq. 'DECAY') then\n")
modelfile.write("               line = adjustl(line(6:l))\n")
modelfile.write("               call read_slha_line_decay(line, i)\n")
modelfile.write("               block = 2\n")
modelfile.write("            else\n")
modelfile.write("               write(*,'(A37,I5)') \"Illegal statement in SLHA file, line \", lnr\n")
modelfile.write("               if (present(ierr)) ierr = 1\n")
modelfile.write("               return\n")
modelfile.write("            end if\n")
modelfile.write("         else\n")
modelfile.write("            ! read a parameter line\n")
modelfile.write("            select case(block)\n")
modelfile.write("            case(0)\n")
modelfile.write("               call read_slha_block_mass(line(1:l), i)\n")
modelfile.write("               if (i .ne. 0) then\n")
modelfile.write("                  if (present(ierr)) ierr = 1\n")
modelfile.write("                  write(*,'(A44,I5)') &\n")
modelfile.write("                  & \"Unrecognized line format in SLHA file, line \", lnr\n")
modelfile.write("                  return\n")
modelfile.write("               end if\n")
modelfile.write("            case(1)\n")
modelfile.write("               call read_slha_block_decay(line(1:l), i)\n")
modelfile.write("               if (i .ne. 0) then\n")
modelfile.write("                  if (present(ierr)) ierr = 1\n")
modelfile.write("                  write(*,'(A44,I5)') &\n")
modelfile.write("                  & \"Unrecognized line format in SLHA file, line \", lnr\n")
modelfile.write("                  return\n")
modelfile.write("               end if\n")
modelfile.write("            case default\n")
modelfile.write("               cycle loop1\n")
modelfile.write("            end select\n")
modelfile.write("         end if\n")
modelfile.write("      end do loop1\n")
modelfile.write("      if (present(ierr)) ierr = 0\n")
modelfile.write("   end subroutine read_slha\n")
modelfile.write("   subroutine read_slha_block_mass(line, ierr)\n")
modelfile.write("      implicit none\n")
modelfile.write("      character(len=*), intent(in) :: line\n")
modelfile.write("      integer, intent(out), optional :: ierr\n")
modelfile.write("      integer :: idx1,ioerr\n")
modelfile.write("      real(ki) :: value\n")
modelfile.write("\n")
modelfile.write("      read(line,*,iostat=ioerr) idx1, value\n")
modelfile.write("      if (ioerr .ne. 0) then\n")
modelfile.write("         if (present(ierr)) ierr = 1\n")
modelfile.write("         return\n")
modelfile.write("      end if\n")
modelfile.write("      select case(idx1)\n")
modelfile.write("      case(1)\n")
modelfile.write("         mD = value\n")
modelfile.write("      case(2)\n")
modelfile.write("         mU = value\n")
modelfile.write("      case(3)\n")
modelfile.write("         mS = value\n")
modelfile.write("      case(4)\n")
modelfile.write("         mC = value\n")
modelfile.write("      case(5)\n")
modelfile.write("         mB = value\n")
modelfile.write("      case(6)\n")
modelfile.write("         mT = value\n")
modelfile.write("      case(11)\n")
modelfile.write("         me = value\n")
modelfile.write("      case(13)\n")
modelfile.write("         mmu = value\n")
modelfile.write("      case(15)\n")
modelfile.write("         mtau = value\n")
modelfile.write("      case(23)\n")
modelfile.write("         mZ = value\n")
modelfile.write("      case(24)\n")
modelfile.write("         mW = value\n")
modelfile.write("      case(25)\n")
modelfile.write("         mH = value\n")
modelfile.write("      end select\n")
modelfile.write("      if (present(ierr)) ierr = 0\n")
modelfile.write("   end subroutine read_slha_block_mass\n")
modelfile.write("   subroutine read_slha_block_decay(line, ierr)\n")
modelfile.write("   !  This subroutine reads the 'branching ratios' of\n")
modelfile.write("   !  the slha file: these are just thrown away\n")
modelfile.write("      implicit none\n")
modelfile.write("      character(len=*), intent(in) :: line\n")
modelfile.write("      integer, intent(out), optional :: ierr\n")
modelfile.write("      integer :: idx1,idx2,ioerr,nda\n")
modelfile.write("      real(ki) :: value\n")
modelfile.write("      read(line,*,iostat=ioerr) value, nda, idx1, idx2\n")
modelfile.write("      if (ioerr .ne. 0) then\n")
modelfile.write("         if (present(ierr)) ierr = 1\n")
modelfile.write("         return\n")
modelfile.write("      end if\n")
modelfile.write("      if (present(ierr)) ierr = 0\n")
modelfile.write("   end subroutine read_slha_block_decay\n")
modelfile.write("   subroutine read_slha_line_decay(line, ierr)\n")
modelfile.write("      implicit none\n")
modelfile.write("      character(len=*), intent(in) :: line\n")
modelfile.write("      integer, intent(out), optional :: ierr\n")
modelfile.write("      integer :: idx1,ioerr\n")
modelfile.write("      real(ki) :: value\n")
modelfile.write("\n")
modelfile.write("      read(line,*,iostat=ioerr) idx1, value\n")
modelfile.write("      if (ioerr .ne. 0) then\n")
modelfile.write("         if (present(ierr)) ierr = 1\n")
modelfile.write("         return\n")
modelfile.write("      end if\n")
modelfile.write("      select case(idx1)\n")
modelfile.write("      case(9000003)\n")
modelfile.write("         wghZ = value\n")
modelfile.write("      case(9000004)\n")
modelfile.write("         wghWp = value\n")
modelfile.write("      case(5)\n")
modelfile.write("         wB = value\n")
modelfile.write("      case(6)\n")
modelfile.write("         wT = value\n")
modelfile.write("      case(15)\n")
modelfile.write("         wtau = value\n")
modelfile.write("      case(23)\n")
modelfile.write("         wZ = value\n")
modelfile.write("      case(24)\n")
modelfile.write("         wW = value\n")
modelfile.write("      case(250)\n")
modelfile.write("         wchi = value\n")
modelfile.write("      case(251)\n")
modelfile.write("         wphi = value\n")
modelfile.write("      case(9000005)\n")
modelfile.write("         wghWm = value\n")
modelfile.write("      end select\n")
modelfile.write("      if (present(ierr)) ierr = 0\n")
modelfile.write("   end subroutine read_slha_line_decay\n")
modelfile.write("!---#] SLHA READER:\n")
modelfile.write("!---#[ subroutine set_parameter\n")
modelfile.write("   recursive subroutine set_parameter(name, re, im, ierr)\n")
modelfile.write("      implicit none\n")
modelfile.write("      real(ki), parameter :: pi = 3.14159265358979323846264&\n")
modelfile.write("     &3383279502884197169399375105820974944592307816406286209_ki\n")
modelfile.write("      character(len=*), intent(in) :: name\n")
modelfile.write("      real(ki), intent(in) :: re, im\n")
modelfile.write("      integer, intent(out) :: ierr\n")
modelfile.write("\n")
modelfile.write("      integer :: err, pdg, nidx, idx\n")
modelfile.write("      complex(ki) :: tmp\n")
modelfile.write("\n")
modelfile.write("      logical :: must_be_real\n")
modelfile.write("      must_be_real = .false.\n")
modelfile.write("      ierr = 1 ! OK\n")
modelfile.write("\n")
modelfile.write("if (name(1:5).eq.\"mass(\" .and. len_trim(name)>=7) then\n")
modelfile.write("         idx = scan(name,\")\",.false.)\n")
modelfile.write("         if (idx.eq.0) then\n")
modelfile.write("            idx=len_trim(name)+1\n")
modelfile.write("         end if\n")
modelfile.write("         read(name(6:idx-1),*, iostat=err) pdg\n")
modelfile.write("         if (err.ne.0) then\n")
modelfile.write("            ierr=0 !FAIL\n")
modelfile.write("            return\n")
modelfile.write("         end if\n")
modelfile.write("         must_be_real = .true.\n")
modelfile.write("         select case(pdg)\n")

modelfile.write("            case(1)\n")
modelfile.write("               mD = re\n")
modelfile.write("            case(2)\n")
modelfile.write("               mU = re\n")
modelfile.write("            case(3)\n")
modelfile.write("               mS = re\n")
modelfile.write("            case(4)\n")
modelfile.write("               mC = re\n")
modelfile.write("            case(5)\n")
modelfile.write("               mB = re\n")
modelfile.write("            case(6)\n")
modelfile.write("               mT = re\n")
modelfile.write("            case(11)\n")
modelfile.write("               me = re\n")
modelfile.write("            case(13)\n")
modelfile.write("               mmu = re\n")
modelfile.write("            case(15)\n")
modelfile.write("               mtau = re\n")
modelfile.write("            case(23)\n")
modelfile.write("               mZ = re\n")
modelfile.write("            case(24)\n")
modelfile.write("               mW = re\n")
modelfile.write("            case(25)\n")
modelfile.write("               mH = re\n")
modelfile.write("            case default\n")
modelfile.write("               write(*,'(A20,1x,I10)') \"Cannot set mass for PDG code:\", pdg\n")
modelfile.write("               ierr = 0\n")
modelfile.write("               return\n")
modelfile.write("            end select\n")
modelfile.write("     elseif (len_trim(name)>=8 .and. name(1:6).eq.\"width(\") then\n")
modelfile.write("         idx = scan(name,\")\",.false.)\n")
modelfile.write("         if (idx.eq.0) then\n")
modelfile.write("            idx=len_trim(name)+1\n")
modelfile.write("         end if\n")
modelfile.write("         read(name(7:idx-1),*, iostat=err) pdg\n")
modelfile.write("         if (err.ne.0) then\n")
modelfile.write("            ierr=0 !FAIL\n")
modelfile.write("            return\n")
modelfile.write("         end if\n")
modelfile.write("         must_be_real = .true.\n")
modelfile.write("         select case(pdg)\n")

modelfile.write("            case(9000003)\n")
modelfile.write("               wghZ = re\n")
modelfile.write("            case(9000004)\n")
modelfile.write("               wghWp = re\n")
modelfile.write("            case(5)\n")
modelfile.write("               wB = re\n")
modelfile.write("            case(6)\n")
modelfile.write("               wT = re\n")
modelfile.write("            case(15)\n")
modelfile.write("               wtau = re\n")
modelfile.write("            case(23)\n")
modelfile.write("               wZ = re\n")
modelfile.write("            case(24)\n")
modelfile.write("               wW = re\n")
modelfile.write("            case(250)\n")
modelfile.write("               wchi = re\n")
modelfile.write("            case(251)\n")
modelfile.write("               wphi = re\n")
modelfile.write("            case(9000005)\n")
modelfile.write("               wghWm = re\n")
modelfile.write("            case default\n")
modelfile.write("               write(*,'(A20,1x,I10)') \"Cannot set width for PDG code:\", pdg\n")
modelfile.write("               ierr = 0 !FAIL\n")
modelfile.write("               return\n")
modelfile.write("            end select\n")
modelfile.write("     elseif (name .eq. \"MASS&&1\") then\n")
modelfile.write("               must_be_real = .true.\n")
modelfile.write("               mD = re\n")
modelfile.write("     elseif (name .eq. \"MASS&&2\") then\n")
modelfile.write("               must_be_real = .true.\n")
modelfile.write("               mU = re\n")
modelfile.write("     elseif (name .eq. \"MASS&&3\") then\n")
modelfile.write("               must_be_real = .true.\n")
modelfile.write("               mS = re\n")
modelfile.write("     elseif (name .eq. \"MASS&&4\") then\n")
modelfile.write("               must_be_real = .true.\n")
modelfile.write("               mC = re\n")
modelfile.write("     elseif (name .eq. \"MASS&&5\") then\n")
modelfile.write("               must_be_real = .true.\n")
modelfile.write("               mB = re\n")
modelfile.write("     elseif (name .eq. \"MASS&&6\") then\n")
modelfile.write("               must_be_real = .true.\n")
modelfile.write("               mT = re\n")
modelfile.write("     elseif (name .eq. \"MASS&&11\") then\n")
modelfile.write("               must_be_real = .true.\n")
modelfile.write("               me = re\n")
modelfile.write("     elseif (name .eq. \"MASS&&13\") then\n")
modelfile.write("               must_be_real = .true.\n")
modelfile.write("               mmu = re\n")
modelfile.write("     elseif (name .eq. \"MASS&&15\") then\n")
modelfile.write("               must_be_real = .true.\n")
modelfile.write("               mtau = re\n")
modelfile.write("     elseif (name .eq. \"MASS&&23\") then\n")
modelfile.write("               must_be_real = .true.\n")
modelfile.write("               mZ = re\n")
modelfile.write("     elseif (name .eq. \"MASS&&24\") then\n")
modelfile.write("               must_be_real = .true.\n")
modelfile.write("               mW = re\n")
modelfile.write("     elseif (name .eq. \"MASS&&25\") then\n")
modelfile.write("               must_be_real = .true.\n")
modelfile.write("               mH = re\n")
modelfile.write("     elseif (name .eq. \"DECAY&&9000003\") then\n")
modelfile.write("               must_be_real = .true.\n")
modelfile.write("               wghZ = re\n")
modelfile.write("     elseif (name .eq. \"DECAY&&9000004\") then\n")
modelfile.write("               must_be_real = .true.\n")
modelfile.write("               wghWp = re\n")
modelfile.write("     elseif (name .eq. \"DECAY&&5\") then\n")
modelfile.write("               must_be_real = .true.\n")
modelfile.write("               wB = re\n")
modelfile.write("     elseif (name .eq. \"DECAY&&6\") then\n")
modelfile.write("               must_be_real = .true.\n")
modelfile.write("               wT = re\n")
modelfile.write("     elseif (name .eq. \"DECAY&&15\") then\n")
modelfile.write("               must_be_real = .true.\n")
modelfile.write("               wtau = re\n")
modelfile.write("     elseif (name .eq. \"DECAY&&23\") then\n")
modelfile.write("               must_be_real = .true.\n")
modelfile.write("               wZ = re\n")
modelfile.write("     elseif (name .eq. \"DECAY&&24\") then\n")
modelfile.write("               must_be_real = .true.\n")
modelfile.write("               wW = re\n")
modelfile.write("     elseif (name .eq. \"DECAY&&250\") then\n")
modelfile.write("               must_be_real = .true.\n")
modelfile.write("               wchi = re\n")
modelfile.write("     elseif (name .eq. \"DECAY&&251\") then\n")
modelfile.write("               must_be_real = .true.\n")
modelfile.write("               wphi = re\n")
modelfile.write("     elseif (name .eq. \"DECAY&&9000005\") then\n")
modelfile.write("               must_be_real = .true.\n")
modelfile.write("               wghWm = re\n")
modelfile.write("      elseif (name .eq. \"renormalisation\") then\n")
modelfile.write("          if ( real(int(re),ki) == re .and. im == 0.0_ki ) then\n")
modelfile.write("             renormalisation = int(re)\n")
modelfile.write("          else\n")
modelfile.write("             ierr=0 !FAIL\n")
modelfile.write("          end if\n")
modelfile.write("      elseif (name .eq. \"nlo_prefactors\") then\n")
modelfile.write("         if ( real(int(re),ki) == re .and. im == 0.0_ki ) then\n")
modelfile.write("            nlo_prefactors = int(re)\n")
modelfile.write("         else\n")
modelfile.write("            ierr=0 !FAIL\n")
modelfile.write("         end if\n")
modelfile.write("      elseif (name .eq. \"deltaOS\") then\n")
modelfile.write("         if ( real(int(re),ki) == re .and. im == 0.0_ki ) then\n")
modelfile.write("            deltaOS = int(re)\n")
modelfile.write("         else\n")
modelfile.write("            ierr=0 !FAIL\n")
modelfile.write("         end if\n")
modelfile.write("      elseif (name .eq. \"reduction_interoperation\") then\n")
modelfile.write("         if ( real(int(re),ki) == re .and. im == 0.0_ki ) then\n")
modelfile.write("            reduction_interoperation = int(re)\n")
modelfile.write("         else\n")
modelfile.write("            ierr=0 !FAIL\n")
modelfile.write("         end if\n")

modelfile.write("     elseif (any(names .eq. name)) then\n")
modelfile.write("         do nidx=1,size(names)\n")
modelfile.write("            if (names(nidx) .eq. name) exit\n")
modelfile.write("         end do\n")
modelfile.write("         select case (nidx)\n")

modelfile.write("         case(1)\n")
modelfile.write("            alpha = ")

modelfile.write("re\n")

modelfile.write("            must_be_real=.true.\n")


modelfile.write("         case(2)\n")
modelfile.write("            e = ")

modelfile.write("re\n")

modelfile.write("            must_be_real=.true.\n")


modelfile.write("         case(3)\n")
modelfile.write("            gauge1z = ")

modelfile.write("cmplx(re, im, ki)\n")


modelfile.write("         case(4)\n")
modelfile.write("            gauge2z = ")

modelfile.write("cmplx(re, im, ki)\n")


modelfile.write("         case(5)\n")
modelfile.write("            GF = ")

modelfile.write("re\n")

modelfile.write("            must_be_real=.true.\n")


modelfile.write("         case(6)\n")
modelfile.write("            gs = ")

modelfile.write("re\n")

modelfile.write("            must_be_real=.true.\n")


modelfile.write("         case(7)\n")
modelfile.write("            mB = ")

modelfile.write("re\n")

modelfile.write("            must_be_real=.true.\n")


modelfile.write("         case(8)\n")
modelfile.write("            mBMS = ")

modelfile.write("re\n")

modelfile.write("            must_be_real=.true.\n")


modelfile.write("         case(9)\n")
modelfile.write("            mC = ")

modelfile.write("re\n")

modelfile.write("            must_be_real=.true.\n")


modelfile.write("         case(10)\n")
modelfile.write("            mD = ")

modelfile.write("re\n")

modelfile.write("            must_be_real=.true.\n")


modelfile.write("         case(11)\n")
modelfile.write("            me = ")

modelfile.write("re\n")

modelfile.write("            must_be_real=.true.\n")


modelfile.write("         case(12)\n")
modelfile.write("            mH = ")

modelfile.write("re\n")

modelfile.write("            must_be_real=.true.\n")


modelfile.write("         case(13)\n")
modelfile.write("            mmu = ")

modelfile.write("re\n")

modelfile.write("            must_be_real=.true.\n")


modelfile.write("         case(14)\n")
modelfile.write("            mS = ")

modelfile.write("re\n")

modelfile.write("            must_be_real=.true.\n")


modelfile.write("         case(15)\n")
modelfile.write("            mT = ")

modelfile.write("re\n")

modelfile.write("            must_be_real=.true.\n")


modelfile.write("         case(16)\n")
modelfile.write("            mtau = ")

modelfile.write("re\n")

modelfile.write("            must_be_real=.true.\n")


modelfile.write("         case(17)\n")
modelfile.write("            mtauMS = ")

modelfile.write("re\n")

modelfile.write("            must_be_real=.true.\n")


modelfile.write("         case(18)\n")
modelfile.write("            mU = ")

modelfile.write("re\n")

modelfile.write("            must_be_real=.true.\n")


modelfile.write("         case(19)\n")
modelfile.write("            mW = ")

modelfile.write("re\n")

modelfile.write("            must_be_real=.true.\n")


modelfile.write("         case(20)\n")
modelfile.write("            mZ = ")

modelfile.write("re\n")

modelfile.write("            must_be_real=.true.\n")


modelfile.write("         case(21)\n")
modelfile.write("            NC = ")

modelfile.write("re\n")

modelfile.write("            must_be_real=.true.\n")


modelfile.write("         case(22)\n")
modelfile.write("            Nf = ")

modelfile.write("re\n")

modelfile.write("            must_be_real=.true.\n")


modelfile.write("         case(23)\n")
modelfile.write("            Nfgen = ")

modelfile.write("re\n")

modelfile.write("            must_be_real=.true.\n")


modelfile.write("         case(24)\n")
modelfile.write("            sw = ")

modelfile.write("re\n")

modelfile.write("            must_be_real=.true.\n")


modelfile.write("         case(25)\n")
modelfile.write("            wB = ")

modelfile.write("re\n")

modelfile.write("            must_be_real=.true.\n")


modelfile.write("         case(26)\n")
modelfile.write("            wchi = ")

modelfile.write("re\n")

modelfile.write("            must_be_real=.true.\n")


modelfile.write("         case(27)\n")
modelfile.write("            wghWm = ")

modelfile.write("re\n")

modelfile.write("            must_be_real=.true.\n")


modelfile.write("         case(28)\n")
modelfile.write("            wghWp = ")

modelfile.write("re\n")

modelfile.write("            must_be_real=.true.\n")


modelfile.write("         case(29)\n")
modelfile.write("            wghZ = ")

modelfile.write("re\n")

modelfile.write("            must_be_real=.true.\n")


modelfile.write("         case(30)\n")
modelfile.write("            wphi = ")

modelfile.write("re\n")

modelfile.write("            must_be_real=.true.\n")


modelfile.write("         case(31)\n")
modelfile.write("            wT = ")

modelfile.write("re\n")

modelfile.write("            must_be_real=.true.\n")


modelfile.write("         case(32)\n")
modelfile.write("            wtau = ")

modelfile.write("re\n")

modelfile.write("            must_be_real=.true.\n")


modelfile.write("         case(33)\n")
modelfile.write("            wW = ")

modelfile.write("re\n")

modelfile.write("            must_be_real=.true.\n")


modelfile.write("         case(34)\n")
modelfile.write("            wZ = ")

modelfile.write("re\n")

modelfile.write("            must_be_real=.true.\n")


modelfile.write("         end select\n")
modelfile.write("     else\n")
modelfile.write("         if (name(1:3) /= \"mdl\") then\n")
modelfile.write("            call set_parameter(\"mdl\" // name(4:),re,im,ierr)\n")
modelfile.write("            return\n")
modelfile.write("         end if\n")
modelfile.write("         ierr = 0 !FAIL / UNKNOWN\n")
modelfile.write("     end if\n")
modelfile.write("     if (must_be_real .and. im /= 0.0_ki .and. ierr.eq.1) then\n")
modelfile.write("        ierr = 0 ! FAIL\n")
modelfile.write("     end if\n")
modelfile.write("\n")

modelfile.write("     if(any(ew_parameters .eq. name) .or. (name.eq.\"mass(23)\") .or. &\n")
modelfile.write("        (name.eq.\"mass(24)\"))  then\n")
modelfile.write("         do nidx=1,size(ew_parameters)\n")
modelfile.write("            if (ew_parameters(nidx) .eq. name) exit\n")
modelfile.write("         end do\n")
modelfile.write("         if(name.eq.\"mass(23)\") then\n")
modelfile.write("            nidx=2\n")
modelfile.write("         elseif(name.eq.\"mass(24)\") then\n")
modelfile.write("            nidx=1\n")
modelfile.write("         end if\n")
modelfile.write("         if (.not. btest(choosen_ew_parameters,nidx)) then\n")
modelfile.write("            choosen_ew_parameters_count = choosen_ew_parameters_count + 1\n")
modelfile.write("            choosen_ew_parameters = ibset(choosen_ew_parameters, nidx)\n")

modelfile.write("            if (choosen_ew_parameters_count == 1) then\n")
modelfile.write("               orig_ewchoice = ewchoice\n")
modelfile.write("               if(ewchoice > 0) then\n")
modelfile.write("                 select case(choosen_ew_parameters)\n")
modelfile.write("                      case(2) ! mW\n")
modelfile.write("                        if (ewchoice /= 1 .and. ewchoice /= 2 .and. &\n")
modelfile.write("                            &   ewchoice /= 6) then\n")
modelfile.write("                          ewchoice = 1\n")
modelfile.write("                        end if\n")
modelfile.write("                      case(4) ! mZ\n")
modelfile.write("                        if (ewchoice /= 1 .and. ewchoice /= 2 .and. &\n")
modelfile.write("                            &   ewchoice /= 6) then\n")
modelfile.write("                          ewchoice = 1\n")
modelfile.write("                        end if\n")
modelfile.write("                      case(8) ! alpha\n")
modelfile.write("                        if (ewchoice /= 2 .and. ewchoice /= 3 .and. &\n")
modelfile.write("                            &   ewchoice /= 4 .and. ewchoice /= 5) then\n")
modelfile.write("                          ewchoice = 2\n")
modelfile.write("                        end if\n")
modelfile.write("                      case(16) ! GF\n")
modelfile.write("                        if (ewchoice /= 1 .and. ewchoice /= 4 .and. &\n")
modelfile.write("                            &   ewchoice /= 8) then\n")
modelfile.write("                          ewchoice = 1\n")
modelfile.write("                        end if\n")
modelfile.write("                     case(32) ! sw\n")
modelfile.write("                        if (ewchoice /= 3 .and. ewchoice /= 4 .and. &\n")
modelfile.write("                             &   ewchoice /= 7 .and. ewchoice /= 8) then\n")
modelfile.write("                          ewchoice = 1\n")
modelfile.write("                        end if\n")

modelfile.write("                      case(64) ! e\n")
modelfile.write("                        if (ewchoice < 6) then\n")
modelfile.write("                           ewchoice = 6\n")
modelfile.write("                        end if\n")

modelfile.write("                    end select\n")
modelfile.write("                end if\n")
modelfile.write("            elseif (choosen_ew_parameters_count == 2) then\n")
modelfile.write("                if (choosen_ew_parameters == 18 .or. choosen_ew_parameters == 20 &\n")
modelfile.write("                   & .or. choosen_ew_parameters == 6) then\n")
modelfile.write("                   ewchoice = 1\n")
modelfile.write("                elseif (choosen_ew_parameters == 10 .or. choosen_ew_parameters == 12) then\n")
modelfile.write("                   ewchoice = 2\n")
modelfile.write("                elseif (choosen_ew_parameters == 40 .or. choosen_ew_parameters == 36) then\n")
modelfile.write("                   ewchoice = 3\n")
modelfile.write("                elseif (choosen_ew_parameters == 24 .or. choosen_ew_parameters == 48) then\n")
modelfile.write("                   ewchoice = 4\n")
modelfile.write("                elseif (choosen_ew_parameters == 20) then\n")
modelfile.write("                   ewchoice = 5\n")

modelfile.write("                 elseif (choosen_ew_parameters == 66 .or. choosen_ew_parameters == 68) then\n")
modelfile.write("                   ewchoice = 6\n")
modelfile.write("                 elseif (choosen_ew_parameters == 96) then\n")
modelfile.write("                   ewchoice = 7\n")
modelfile.write("                 elseif (choosen_ew_parameters == 80) then\n")
modelfile.write("                   ewchoice = 8\n")

modelfile.write("                 else\n")
modelfile.write("                 ewchoice = orig_ewchoice\n")
modelfile.write("                 write(*,'(A,1x,I2)') 'Unknown/Invalid EW scheme. Falling back to No.',&\n")
modelfile.write("                                     ewchoice\n")
modelfile.write("                 ierr = 0\n")
modelfile.write("                end if\n")
modelfile.write("            elseif (choosen_ew_parameters_count >= 4) then\n")
modelfile.write("                 write(*,'(A,A,A)') 'EW parameter \"', name, '\" is already determined.'\n")
modelfile.write("                 write(*,'(A)') 'New values are ignored.'\n")
modelfile.write("                 write(*,'(A17,1x,I3)') 'Current EW choice:', ewchoice\n")
modelfile.write("                 ierr = -1 ! IGNORE\n")
modelfile.write("            elseif(choosen_ew_parameters_count == 3) then\n")
modelfile.write("               select case(choosen_ew_parameters)\n")
modelfile.write("                case(22) ! GF,mW,mZ -> e,sw\n")
modelfile.write("                        ewchoice = 1\n")
modelfile.write("                case(14) ! alpha, mW, mZ  -> e,sw\n")
modelfile.write("                        ewchoice = 2\n")
modelfile.write("                case(44) ! alpha, sw, mZ -> e, mW\n")
modelfile.write("                        ewchoice = 3\n")
modelfile.write("                case(56) ! alpha, sw, GF ->  e, mW\n")
modelfile.write("                        ewchoice = 4\n")
modelfile.write("                case(28) ! alpha, GF, mZ ->  e, mW, sw\n")
modelfile.write("                        ewchoice = 5\n")

modelfile.write("                case(70) ! e, mW, mZ -> sw\n")
modelfile.write("                        ewchoice = 6\n")
modelfile.write("                case(100) ! e, sw, mZ -> mW\n")
modelfile.write("                        ewchoice = 7\n")
modelfile.write("                case(112) ! e, sw, GF -> mW, mZ\n")
modelfile.write("                        ewchoice = 8\n")

modelfile.write("                case default\n")
modelfile.write("                 ewchoice = orig_ewchoice\n")
modelfile.write("                 write(*,'(A,1x,I2)') 'Unknown/Invalid EW scheme. Falling back to No.',&\n")
modelfile.write("                                     ewchoice\n")
modelfile.write("                 ierr = 0\n")
modelfile.write("               end select\n")
modelfile.write("            end if\n")
modelfile.write("         end if\n")
modelfile.write("     end if\n")

modelfile.write("\n")
modelfile.write("\n")
modelfile.write("     call init_functions()\n")
modelfile.write("      ! TODO init_color\n")
modelfile.write("   end subroutine\n")
modelfile.write("!---#] subroutine set_parameter\n")




modelfile.write("!---#[ subroutine init_functions:\n")
modelfile.write("   subroutine     init_functions()\n")
modelfile.write("      implicit none\n")
modelfile.write("      complex(ki), parameter :: i_ = (0.0_ki, 1.0_ki)\n")
modelfile.write("      real(ki), parameter :: pi = 3.14159265358979323846264&\n")
modelfile.write("     &3383279502884197169399375105820974944592307816406286209_ki\n")
modelfile.write("%s" % outdict['Functions'])
modelfile.write("end subroutine init_functions\n")
modelfile.write("!---#] subroutine init_functions:\n")
modelfile.write("!---#[ utility functions for model initialization:\n")
modelfile.write("   pure function ifpos(x0, x1, x2)\n")
modelfile.write("      implicit none\n")
modelfile.write("      real(ki), intent(in) :: x0, x1, x2\n")
modelfile.write("      real(ki) :: ifpos\n")
modelfile.write("\n")
modelfile.write("      if (x0 > 0.0_ki) then\n")
modelfile.write("         ifpos = x1\n")
modelfile.write("      else\n")
modelfile.write("         ifpos = x2\n")
modelfile.write("      endif\n")
modelfile.write("   end  function ifpos\n")
modelfile.write("\n")
modelfile.write("   pure function sort4(m1, m2, m3, m4, n)\n")
modelfile.write("      implicit none\n")
modelfile.write("      real(ki), intent(in) :: m1, m2, m3, m4\n")
modelfile.write("      integer, intent(in) :: n\n")
modelfile.write("      real(ki) :: sort4\n")
modelfile.write("\n")
modelfile.write("      real(ki), dimension(4) :: m\n")
modelfile.write("      logical :: f\n")
modelfile.write("      integer :: i\n")
modelfile.write("      real(ki) :: tmp\n")
modelfile.write("\n")
modelfile.write("      m(1) = m1\n")
modelfile.write("      m(2) = m2\n")
modelfile.write("      m(3) = m3\n")
modelfile.write("      m(4) = m4\n")
modelfile.write("\n")
modelfile.write("      ! Bubble Sort\n")
modelfile.write("      do\n")
modelfile.write("         f = .false.\n")
modelfile.write("\n")
modelfile.write("         do i=1,3\n")
modelfile.write("            if (abs(m(i)) .gt. abs(m(i+1))) then\n")
modelfile.write("               tmp = m(i)\n")
modelfile.write("               m(i) = m(i+1)\n")
modelfile.write("               m(i+1) = tmp\n")
modelfile.write("               f = .true.\n")
modelfile.write("            end if\n")
modelfile.write("         end do\n")
modelfile.write("\n")
modelfile.write("         if (.not. f) exit\n")
modelfile.write("      end do\n")
modelfile.write("\n")
modelfile.write("      sort4 = m(n)\n")
modelfile.write("   end  function sort4\n")
modelfile.write("!---#] utility functions for model initialization:\n")


modelfile.write("end module gghh_smehc_model\n")

modelfile.close()
### additional formatting for output files

postformat('model.f90')

