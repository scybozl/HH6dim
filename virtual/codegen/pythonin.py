# vim: ts=3:sw=3:expandtab
# Input for python parser. It is here because Python needs it
# and you specified extensions=formopt

# we need types of parameters
# a list of all functions
# a list of all dotproducts
# a list of mathematical operators and their translations


parameters={
	'alpha'   : 'real',
	'e'       : 'real',
	'gauge1z' : 'complex',
	'gauge2z' : 'complex',
	'GF'      : 'real',
	'gs'      : 'real',
	'mB'      : 'real',
	'mBMS'    : 'real',
	'mC'      : 'real',
	'mD'      : 'real',
	'me'      : 'real',
	'mH'      : 'real',
	'mmu'     : 'real',
	'mS'      : 'real',
	'mT'      : 'real',
	'mtau'    : 'real',
	'mtauMS'  : 'real',
	'mU'      : 'real',
	'mW'      : 'real',
	'mZ'      : 'real',
	'NC'      : 'real',
	'Nf'      : 'real',
	'Nfgen'   : 'real',
	'sw'      : 'real',
	'wB'      : 'real',
	'wchi'    : 'real',
	'wghWm'   : 'real',
	'wghWp'   : 'real',
	'wghZ'    : 'real',
	'wH'      : 'real',
	'wphi'    : 'real',
	'wT'      : 'real',
	'wtau'    : 'real',
	'wW'      : 'real',
	'wZ'      : 'real',

	'gUa' : 'real',
	'gWWZZ' : 'real',
	'gBa' : 'real',
	'gtauv' : 'real',
	'gWWZ' : 'real',
	'gtaur' : 'real',
	'gUl' : 'real',
	'gBv' : 'real',
	'gUr' : 'real',
	'gBr' : 'real',
	'gUv' : 'real',
	'gHZZ' : 'real',
	'gSa' : 'real',
	'gtaua' : 'real',
	'gW' : 'real',
	'gHHH' : 'real',
	'gntaur' : 'real',
	'gntauv' : 'real',
	'gAPP' : 'real',
	'gntaul' : 'real',
	'gntaua' : 'real',
	'gGWX' : 'complex',
	'gBl' : 'real',
	'gH' : 'real',
	'gCa' : 'real',
	'ger' : 'real',
	'gev' : 'real',
	'gHC' : 'real',
	'gCl' : 'real',
	'gGWH' : 'real',
	'gea' : 'real',
	'gCr' : 'real',
	'gCv' : 'real',
	'gel' : 'real',
	'gtaul' : 'real',
	'gPWZ' : 'real',
	'gDl' : 'real',
	'gZZPP' : 'real',
	'gHHHH' : 'real',
	'gZZHH' : 'real',
	'ef' : 'real',
	'gGZWP' : 'real',
	'gHXX' : 'real',
	'gWWPP' : 'real',
	'gDr' : 'real',
	'gDv' : 'real',
	'gGZH' : 'real',
	'gDa' : 'real',
	'gWAPX' : 'complex',
	'gHWW' : 'real',
	'gWWXX' : 'real',
	'gTa' : 'real',
	'gTl' : 'real',
	'gTr' : 'real',
	'gTv' : 'real',
	'gPtau' : 'real',
	'gHPP' : 'real',
	'gWWAZ' : 'real',
	'gWWAA' : 'real',
	'alphaf' : 'real',
	'gnmul' : 'real',
	'gAAPP' : 'real',
	'gHtau' : 'real',
	'gZ' : 'real',
	'gXmu' : 'real',
	'gHHPP' : 'real',
	'Nfrat' : 'real',
	'cw' : 'real',
	'gGWZP' : 'real',
	'gnmua' : 'real',
	'NA' : 'real',
	'gner' : 'real',
	'gSv' : 'real',
	'gnev' : 'real',
	'swf' : 'real',
	'gnmuv' : 'real',
	'mZf' : 'real',
	'gZXH' : 'complex',
	'gnmur' : 'real',
	'gnel' : 'real',
	'gHmu' : 'real',
	'gPPPP' : 'real',
	'gnea' : 'real',
	'gXtau' : 'real',
	'gWWHH' : 'real',
	'gWWWW' : 'real',
	'gWZPH' : 'real',
	'gHe' : 'real',
	'gWZPX' : 'complex',
	'gHHXX' : 'real',
	'gXD' : 'real',
	'gmur' : 'real',
	'gSr' : 'real',
	'gmuv' : 'real',
	'gXB' : 'real',
	'gXC' : 'real',
	'gXT' : 'real',
	'gXU' : 'real',
	'gmua' : 'real',
	'mWf' : 'real',
	'gXS' : 'real',
	'gSl' : 'real',
	'gmul' : 'real',
	'gHT' : 'real',
	'gHU' : 'real',
	'gHS' : 'real',
	'gWPH' : 'real',
	'gPWA' : 'real',
	'gHD' : 'real',
	'gZZXX' : 'real',
	'gHB' : 'real',
	'gPmu' : 'real',
	'gZPP' : 'real',
	'gXe' : 'real',
	'gPe' : 'real',
	'gWAPH' : 'real',
	'gXXXX' : 'real',
	'gAH' : 'real',
	'GFf' : 'real',
	'gPD' : 'real',
	'gPB' : 'real',
	'gPC' : 'real',
	'gXXPP' : 'real',
	'gAZPP' : 'real',
	'gPT' : 'real',
	'gPU' : 'real',
	'gWPX' : 'complex',
	'gPS' : 'real',

	'TR' : 'real',
	'pi' : 'real',
   'i_' : 'complex',
   'abb' : 'array',
   'acc' : 'array',
   'acd' : 'array',
   'abbWrap' : 'array',
   'mabb' : 'array'
   }


kinematics={

	'es12' : 'real',
	'es3' : 'real',
	'es23' : 'real',
	'es4' : 'real',
	'spak1k2' : 'complex', 'spbk2k1' : 'complex',
	'spak1l3' : 'complex', 'spbl3k1' : 'complex',
	'spak1l4' : 'complex', 'spbl4k1' : 'complex',
	'spak2l3' : 'complex', 'spbl3k2' : 'complex',
	'spak2l4' : 'complex', 'spbl4k2' : 'complex',
	'spal3l4' : 'complex', 'spbl4l3' : 'complex',
	'k1' : 'vector',
	'gauge1z' : 'complex',
	'k2' : 'vector',
	'gauge2z' : 'complex',
	'k3' : 'vector', 'l3' : 'vector',
	'k4' : 'vector', 'l4' : 'vector',
	'e1' : 'cvector',
	'e2' : 'cvector',
	'spak1e1' : 'complex', 'spbe1k1' : 'complex',
	'spae1k1' : 'complex', 'spbk1e1' : 'complex',
	'spak1e2' : 'complex', 'spbe2k1' : 'complex',
	'spae1k2' : 'complex', 'spbk2e1' : 'complex',
	'spae1l3' : 'complex', 'spbl3e1' : 'complex',
	'spae1l4' : 'complex', 'spbl4e1' : 'complex',
	'spak2e2' : 'complex', 'spbe2k2' : 'complex',
	'spae2k2' : 'complex', 'spbk2e2' : 'complex',
	'spae2l3' : 'complex', 'spbl3e2' : 'complex',
	'spae2l4' : 'complex', 'spbl4e2' : 'complex',
	'spae1e2' : 'complex', 'spbe2e1' : 'complex',
	'spvak1e1' : 'cvector', 'spvae1k1' : 'cvector',
	'spvak1e2' : 'cvector', 'spvae2k1' : 'cvector',
	'spvak2e1' : 'cvector', 'spvae1k2' : 'cvector',
	'spvak2e2' : 'cvector', 'spvae2k2' : 'cvector',
	'spval3e1' : 'cvector', 'spvae1l3' : 'cvector',
	'spval3e2' : 'cvector', 'spvae2l3' : 'cvector',
	'spval4e1' : 'cvector', 'spvae1l4' : 'cvector',
	'spval4e2' : 'cvector', 'spvae2l4' : 'cvector',
	'spvae1e2' : 'cvector', 'spvae2e1' : 'cvector',
	'c1' : 'color'
}

dotproducts={
		'QspQ' : 'dotproduct(Q,Q)','Qspk1' : 'dotproduct(Q,k1)','Qspk2' : 'dotproduct(Q,k2)','Qspk3' : 'dotproduct(Q,k3)', 'Qspl3' : 'dotproduct(Q,l3)','Qspk4' : 'dotproduct(Q,k4)', 'Qspl4' : 'dotproduct(Q,l4)','Qspe1' : 'dotproduct(Q,e1)','Qspe2' : 'dotproduct(Q,e2)','Qspvak1k2' : 'dotproduct(Q,spvak1k2)','Qspvak1l3' : 'dotproduct(Q,spvak1l3)','Qspvak1l4' : 'dotproduct(Q,spvak1l4)','Qspvak2k1' : 'dotproduct(Q,spvak2k1)','Qspvak2l3' : 'dotproduct(Q,spvak2l3)','Qspvak2l4' : 'dotproduct(Q,spvak2l4)','Qspval3k1' : 'dotproduct(Q,spval3k1)','Qspval3k2' : 'dotproduct(Q,spval3k2)','Qspval3l4' : 'dotproduct(Q,spval3l4)','Qspval4k1' : 'dotproduct(Q,spval4k1)','Qspval4k2' : 'dotproduct(Q,spval4k2)','Qspval4l3' : 'dotproduct(Q,spval4l3)','Qspvak1e1' : 'dotproduct(Q,spvak1e1)' ,'Qspvae1k1': 'dotproduct(Q,spvae1k1)','Qspvak1e2' : 'dotproduct(Q,spvak1e2)' ,'Qspvae2k1': 'dotproduct(Q,spvae2k1)','Qspvak2e1' : 'dotproduct(Q,spvak2e1)' ,'Qspvae1k2': 'dotproduct(Q,spvae1k2)','Qspvak2e2' : 'dotproduct(Q,spvak2e2)' ,'Qspvae2k2': 'dotproduct(Q,spvae2k2)','Qspval3e1' : 'dotproduct(Q,spval3e1)' ,'Qspvae1l3': 'dotproduct(Q,spvae1l3)','Qspval3e2' : 'dotproduct(Q,spval3e2)' ,'Qspvae2l3': 'dotproduct(Q,spvae2l3)','Qspval4e1' : 'dotproduct(Q,spval4e1)' ,'Qspvae1l4': 'dotproduct(Q,spvae1l4)','Qspval4e2' : 'dotproduct(Q,spval4e2)' ,'Qspvae2l4': 'dotproduct(Q,spvae2l4)','Qspvae1e2' : 'dotproduct(Q,spvae1e2)',
  'Qspvae2e1' : 'dotproduct(Q,spvae2e1)'}




symbols = {
            'sqrt2' : 'sqrt2',
            'Sqrt2' : 'sqrt2',
            'Qt2' : 'mu2',
            '/' : '/' ,
         	'(' : '(' ,
           	')' : ')' ,
         	'^' : '**',
         	'+' : '+',
         	'-' : '-',
         	'*' : '*',
            'ZERO' : '0.0_ki'
	}


lambdafunc = {  'madf'  :  lambda x,y,z: '%s + %s + %s' % (x,y,z),
                'log'   :  lambda x : 'log(%s)' % x,
                'csqrt' :  lambda x:  'sqrt(%s)' % x,
	             'sqrt'  :  lambda x:  'sqrt(%s)' % x,
  	             'sin'  :  lambda x:  'sin(%s)' % x,
	             'cos'  :  lambda x:  'cos(%s)' % x,
	             'tan'  :  lambda x:  'tan(%s)' % x,
	             'asin'  :  lambda x:  'asin(%s)' % x,
	             'acos'  :  lambda x:  'acos(%s)' % x,
	             'atan'  :  lambda x:  'atan(%s)' % x,
	             'exp'  :  lambda x:  'exp(%s)' % x,
                'pow'  :  lambda x,y : '(%s)**(%s)' % (x,y),
                'atan2' : lambda x,y : 'atan2(%s, %s)' % (x,y),
                'fabs' : lambda x : 'abs(%s)' % (x,y),
                'if' : lambda x,y,z : 'ifpos(%s,%s,%s)' % (x,y,z),
                'complexconjugate' : lambda x : 'conjg(%s)' % x,
  	             'SpSqrt' : lambda x : 'sqrt(%s)' % x,
                'dotproduct' : lambda x,y : 'dotproduct(%s,%s)' % (x,y),
                'SUBSCRIPT' : lambda f,x :  '%s(%s)' % (f,x),
                'Wrapper' : lambda f: '%s' % f,
                'd' : lambda x,y : 'd(%s,%s)' % (x,y)
            }
